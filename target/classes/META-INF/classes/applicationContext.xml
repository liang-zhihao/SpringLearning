<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
   http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/aop
   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

<!--java folder(marked as source folder) and resources folder (marked as resources folder) are root folders-->
    <bean name="helloImpl3" class="com.liang.HelloImpl3">
        <!--        three ways to inject the args :1.by index( index="0") 2. by arg's name(name="message") 3. by arg's type(type="java.lang.String") and value-->
        <constructor-arg index="0" name="message" type="java.lang.String" value="Hello"></constructor-arg>
        <constructor-arg index="1" name="index" type="int" value="1"></constructor-arg>
    </bean>
    <bean id="helloImpl" class="com.liang.HelloImpl"></bean>

    <bean id="byIndex" class="com.liang.HelloImpl3">
        <constructor-arg index="0" value="Hello"></constructor-arg>
        <constructor-arg index="1" value="1"></constructor-arg>
    </bean>

    <!--    setter injection: only byName! requirement:1 property is private2property has getter and setter(boolean can isOK())

    Boolean val  can use "true/false" "1/0" "yse/no"
    -->
    <bean name="helloImpl4" class="com.liang.HelloImpl4">
        <property name="index">
            <value>1</value>
        </property>
        <property name="message" value="by setter injection"></property>
    </bean>
    <bean class="com.liang.IdrefTestBean" id="idrefTestBean">
        <property name="id" ref="bean1"/>
    </bean>

    <!--    id ref ...-->
    <bean id="bean1" class="java.lang.String">
        <constructor-arg index="0" value="test"></constructor-arg>
    </bean>
    <bean id="bean2" class="java.lang.String">
        <constructor-arg index="0" value="test"></constructor-arg>
    </bean>
    <bean id="idrefBean1" class="com.liang.IdrefTestBean">
        <property name="id">
            <idref bean="bean1"></idref>
        </property>
    </bean>
    <bean id="idrefBean2" class="com.liang.IdrefTestBean">
        <property name="id">
            <idref bean="bean2"></idref>
        </property>
    </bean>

    <!-- Array Map   Set List injection                                 by P namespace to inject-->
    <bean class="com.liang.OtherTypeTestBean" name="otherTypeTestBean" p:testNameSpaceP="123">
        <property name="stringList">
            <list>
                <value>1</value>
                <value>1</value>
                <value>1</value>
            </list>
        </property>
        <!--   Collection     -->
        <property name="collection">
            <set>
                <value>1</value>
                <value>1</value>
                <value>1</value>
            </set>
        </property>
        <property name="array">
            <array value-type="java.lang.String" merge="default">
                <value>1</value>
                <value>1</value>
            </array>
        </property>
        <property name="array2">
            <array>
                <array>
                    <value>1</value>
                </array>
                <array>
                    <value>1</value>
                </array>
            </array>
        </property>
        <property name="map">
            <map key-type="java.lang.Integer" value-type="java.lang.String">
                <entry key="2" value="22"></entry>
            </map>
        </property>
        <property name="values">
            <props>
                <prop key="1">1ss</prop>
                <prop key="2">1ss2</prop>
            </props>
        </property>
        <!--    reference other object-->
        <!--        by constructor-->
        <constructor-arg name="hello2"  ref="other">
        </constructor-arg>
        <!--        by setter-->

    </bean>
    <bean class="com.liang.Other" name="other" ></bean>
        <!-- AOP target bean    -->
    <bean name="helloWorldService" class="com.liang.HelloWorldService" ></bean>
    <bean name="helloWorldAspect" class="com.liang.HelloWorldAspect" ></bean>
    <aop:config>
        <aop:pointcut id="cutpoint" expression="execution(* com.liang..*.*(..))"/>
        <aop:aspect id="aspect" ref="helloWorldAspect">
<!--            <aop:before method="beforeAdvice" pointcut-ref="cutpoint"></aop:before>-->

 <!--            get return val to AOP-->
<!--            <aop:after-returning method="returnTest" pointcut-ref="cutpoint" arg-names="what" returning="what"></aop:after-returning>-->
            <!--            get throwing and AOP -->
<!--            <aop:after-throwing method="afterThrowing" pointcut="execution(* com.liang..*.sayAfterThrowing(..))" arg-names="ex" throwing="ex"></aop:after-throwing>-->
            <aop:around method="aroundTest" pointcut="execution(* com.liang..*.sayAround(..))"></aop:around>
            <!--            <aop:after pointcut-ref="cutpoint" method="afterFinallyAdvice"/>-->

<!--            before with args-->
<!--            <aop:before pointcut="execution(* com.liang..*.sayFuck(..)) and args(what) " method="beforeAdvice2(java.lang.String)"  arg-names="what"></aop:before>-->

        </aop:aspect>
    </aop:config>
<!--    Annotation AOP-->
    <aop:aspectj-autoproxy/>
<!--    if something wrong, programs can have jar problem ,please check pom.xml-->
    <bean class="com.liang.AtAspect" name="atAspect"></bean>
    <bean class="com.liang.AtAspectTest" name="atAspectTest"></bean>

</beans>